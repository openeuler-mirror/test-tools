# -*-coding:utf-8-*-
import io

from Aops_Web_Auto_Test.page_object.base_page import WebPage
from Aops_Web_Auto_Test.common.readelement import Element

vulner = Element('vulnerability')


class VulnerabilityPage(WebPage):

    def enter_cve_menu(self):
        """
        Enter cve magt menu
        Returns:

        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['cves'])
        self.element_displayed(vulner['cve_page_title'])

    def enter_host_menu(self):
        """
        Enter host list menu
        Returns:

        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['hosts'])
        self.element_displayed(vulner['host_list_page_title'])

    def enter_task_menu(self):
        """
        Enter task menu
        Returns:

        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['task'])
        self.element_displayed(vulner['task_list_page_title'])

    def add_repo(self, cluster_name, reponame, repo_content=None, filename=None, action="confirm"):
        """
        Add a repository by either uploading a file or providing content directly.

        Args:
            cluster_name: The name of the cluster to add the repository to.
            reponame: The name of the repository.
            repo_content: The content of the repository as a string, or None to read from `filename`.
            filename: The path to the repository file to read content from, if `repo_content` is None.
            action: The action to take after filling in the form, either "confirm" or "cancel".

        Returns:
            None
        """
        self.click_element(vulner['add_repo'])
        self.element_displayed(vulner['add_repo_page_title'])
        self.select_cluster(cluster_name)
        self.input_text(vulner['add_repo_name'], reponame)

        if repo_content is not None:
            self.input_text(vulner['add_repo_data'], repo_content)
        elif filename is not None:
            self.upload_file(filename)
        else:
            raise ValueError("Either repo_content or filename must be provided.")
        try:
            if action == "confirm":
                self.click_confirm_button()
            elif action == "cancel":
                self.click_cancel_button()
            else:
                raise ValueError("action parameter must be 'confirm' or 'cancel'")
        except Exception as e:
            print(f"Error processing buttons: {e}")

    def set_repo(self, taskname, clustername, reponame, taskdesc,  action1="create", action2="close"):
        """
        Set repo for host
        Args:
            taskname: Input task name
            taskdesc: Inpue task desc
            clustername: Select a cluster
            reponame: Select a repo
            action: 'cancel'、 'create'、 'execute'

        Returns:

        """
        self.click_element(vulner['set_repo_button'])
        self.element_displayed(vulner['set_repo_page_title'])
        self.element_displayed(vulner['set_repo_page_type'])
        self.clear_before_input_text(vulner['task_name'], taskname)
        self.select_cluster(clustername)
        self.select_value_by_dropdown(vulner['select_repo'], reponame)
        self.clear_before_input_text(vulner['task_desc'], taskdesc)
        try:
            if action1 == "cancel":
                self.click_cancel_button()
            elif action1 == "create":
                self.click_element(vulner['create_repo'])
            elif action1 == "execute":
                self.click_element(vulner['execute_repo'])
            else:
                raise ValueError("action 参数必须是create、cancel or execute")
            try:
                if action1 == "create" or action1 == "execute":
                    if action2 == "close":
                        self.click_element(vulner['close'])
                    elif action2 == "jump":
                        self.click_element(vulner['jump_link'])
                    self.element_invisibility(vulner['jump_link'])
                else:
                    raise ValueError("action2 参数必须是close or jump")
            except Exception as e:
                print(f"处理按钮时发生错误：{e}")
        except Exception as e:
            print(f"处理按钮时发生错误：{e}")

    def check_repo_name_in_list(self, repo_name):
        """
        Check repo name in repo list
        Args:
            repo_name: Input a repo name

        Returns:

        """
        new_loc = self.replace_locator_text(vulner['repo_name'], repo_name)
        return self.find_element(new_loc)

    def find_task_name_from_task_list(self, task_name):
        """
        Find task name from task list
        Args:
            task_name:

        Returns:

        """
        new_task_name = self.replace_locator_text(vulner['task_name_in_task_list'], task_name)
        return self.find_element(new_task_name)

    def delete_task(self, task_name, action="confirm"):
        """
        Delete task
        Args:
            task_name: task name
            action: cancel or confirm

        Returns:

        """
        new_task_name = self.replace_locator_text(vulner['delete_task'], task_name)
        self.click_element(new_task_name)
        try:
            if action == "confirm":
                self.click_confirm_button()
            elif action == "cancel":
                self.click_cancel_button()
            else:
                raise ValueError("action 参数必须是cancel or confitm")
        except Exception as e:
            print(f"处理按钮时发生错误：{e}")

    def delete_repo(self, repo_name, action="confirm"):
        new_loc = self.replace_locator_text(vulner['repo_delete'], repo_name)
        self.click_element(new_loc)
        try:
            if action == "confirm":
                self.click_confirm_button()
                self.element_invisibility(vulner['delete_repo_message'])
            elif action == "cancel":
                self.click_cancel_button()
                self.element_invisibility(vulner['delete_repo_message'])
            else:
                raise ValueError("action 参数必须是cancel or confirm")
        except Exception as e:
            print(f"处理按钮时发生错误：{e}")

    def search_repo(self, repo_name):
        self.search_by_placeholder("REPO", repo_name)

    def check_task_execute_status(self, task_name):
        """
        Check task execute status
        Args:
            task_name: task name

        Returns:

        """
        new_loc = self.replace_locator_text(vulner["task_execute_status"], task_name)
        return self.find_element(new_loc)

    def upload_security_advisory(self, file_name, affect='unaffected', action='upload'):
        """
        Upload sa
        Args:
            file_name: sa file,support zip， xml
            affect: unaffected, affected
            action: "upload" or "cancel"

        Returns:

        """

        self.click_element(vulner['upload_sa'])
        self.element_displayed(vulner['upload_sa_title'])
        self.upload_file(file_name)
        self.select_value_by_radio_button(affect)
        if action == "upload":
            self.click_element(vulner['upload_button'])
        elif action == 'cancel':
            self.click_close_button()
        else:
            raise ValueError("action 参数必须是cancel or upload")


    #
    # def hole_scan_no_host(self):
    #     """漏洞扫描 no host"""
    #     self.click_element(asset['hole_scan'])
    #     self.click_element(base_page['confirm'])
    #
    # def export_hole_scan_no_host(self):
    #     """导出no host"""
    #     self.click_element(asset['export'])
    #
    # def export_hole_scan_one_host(self):
    #     """导出one host"""
    #     self.click_element(asset['host_name'])
    #     self.click_element(asset['export_cve_info'])
    #
    # def create_cve_task_nocve(self, taskname):
    #     """生成修复任务　no cve"""
    #     self.click_element(asset['create_repair_task'])
    #     self.input_text(asset['task_name'], taskname)
    #     self.click_element(asset['create_repo'])
    #     self.click_element(asset['close'])
    #
    # def create_cve_task_onecve(self, taskname):
    #     """生成修复任务　one cve"""
    #     self.click_element(asset['checkbox_1'])
    #     self.click_element(asset['create_repair_task'])
    #     self.input_text(asset['task_name'], taskname)
    #     self.click_element(asset['execute_immediately'])
    #     self.click_element(asset['close'])
    #
    # def create_cve_task_morecve(self, taskname):
    #     """生成修复任务　one cve"""
    #     self.click_element(asset['checkbox_1'])
    #     self.click_element(asset['checkbox_2'])
    #     self.click_element(asset['create_repair_task'])
    #     self.input_text(asset['task_name'], taskname)
    #     self.click_element(base_page['cancel'])
    #
    # def view_nocve(self):
    #     """生成修复任务　no cve"""
    #     self.click_element(asset['no_cve'])
    #
    # def view_onecve(self):
    #     """生成修复任务　no cve"""
    #     self.click_element(asset['one_cve'])
    #
    # def view_host1(self):
    #     """生成修复任务　no cve"""
    #     self.click_element(asset['host_name'])
    #
    # def view_task(self):
    #     """查看task页面"""
    #     self.click_element(asset['task'])
    #     self.click_element(asset['task_page'])
    #

