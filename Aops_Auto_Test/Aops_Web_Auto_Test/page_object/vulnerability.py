# -*-coding:utf-8-*-
import io

from Aops_Web_Auto_Test.page_object.base_page import WebPage
from Aops_Web_Auto_Test.common.readelement import Element

vulner = Element('vulnerability')


class VulnerabilityPage(WebPage):

    def enter_cve_magt_menu(self):
        """
        Enter cve magt menu
        Returns:

        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['cves'])
        self.element_displayed(vulner['cve_page_title'])

    def enter_host_menu(self):
        """
        Enter host list menu
        Returns:

        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['hosts'])
        self.element_displayed(vulner['host_list_page_title'])

    def enter_task_menu(self):
        """
        Enter task menu
        Returns:

        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['task'])
        self.element_displayed(vulner['task_list_page_title'])

    def add_repo(self, cluster_name, reponame, repo_content):
        """
        Add repo by upload file
        Args:
            cluster_name: Select cluster
            reponame: Input a repo name
            filename: Upload a repo file

        Returns:

        """
        self.click_element(vulner['add_repo'])
        self.find_element(vulner['add_repo_page_title'])
        self.select_cluster(cluster_name)
        self.input_text(vulner['add_repo_name'], reponame)
        if isinstance(repo_content, str):
            self.input_text(vulner['add_repo_data'], repo_content)
        else:
            with open(repo_content, "w") as f:
                if isinstance(f, io.IOBase):
                    self.upload_file(repo_content)
        self.click_confirm_button()
        # self.element_invisibility(vulner['add_repo_page_title'])

    def set_repo(self, taskname, taskdesc, clustername, reponame, action1="create", action2="close"):
        """
        Set repo for host
        Args:
            taskname: Input task name
            taskdesc: Inpue task desc
            clustername: Select a cluster
            reponame: Select a repo
            action: 'cancel'、 'create'、 'execute'

        Returns:

        """
        self.click_element(vulner['set_repo_button'])
        self.element_displayed(vulner['set_repo_page_title'])
        self.element_displayed(vulner['set_repo_page_type'])
        self.input_text(vulner['task_name'], taskname)
        self.input_text(vulner['task_desc'], taskdesc)
        self.select_cluster(clustername)
        self.select_value_by_dropdown(vulner['select_repo'], reponame)
        try:
            if action1 == "cancel":
                self.click_cancel_button()
            elif action1 == "create":
                self.click_element(vulner['create_repo'])
            elif action1 == "execute":
                self.click_element(vulner['execute_repo'])
            else:
                raise ValueError("action 参数必须是create、cancel or execute")
        except Exception as e:
            print(f"处理按钮时发生错误：{e}")

        if action1 == "create" or action1 == "execute":
            if action2 == "close":
                self.click_element(vulner['close'])
            elif action2 == "jump":
                self.click_element(vulner['jump_link'])
            self.element_invisibility(vulner['jump_link'])

    def check_repo_name_in_list(self, repo_name):
        """
        Check repo name in repo list
        Args:
            repo_name: Input a repo name

        Returns:

        """
        new_loc = self.replace_locator_text(vulner['repo_name'], repo_name)
        return self.find_element(new_loc)

    def find_task_name_from_task_list(self, task_name):
        """
        Find task name from task list
        Args:
            task_name:

        Returns:

        """
        new_task_name = self.replace_locator_text(vulner['task_name_in_task_list'], task_name)
        return self.find_element(new_task_name)

    def delete_task(self, task_name, action="confirm"):
        """
        Delete task
        Args:
            task_name: task name
            action: cancel or confirm

        Returns:

        """
        new_task_name = self.replace_locator_text(vulner['delete_task'], task_name)
        self.click_element(new_task_name)
        try:
            if action == "confirm":
                self.click_confirm_button()
            elif action == "cancel":
                self.click_cancel_button()
            else:
                raise ValueError("action 参数必须是cancel or confitm")
        except Exception as e:
            print(f"处理按钮时发生错误：{e}")

    def delete_repo(self, repo_name, action="confirm"):
        new_loc = self.replace_locator_text(vulner['repo_delete'], repo_name)
        self.click_element(new_loc)
        try:
            if action == "confirm":
                self.click_confirm_button()
            elif action == "cancel":
                self.click_cancel_button()
            else:
                raise ValueError("action 参数必须是cancel or confitm")
        except Exception as e:
            print(f"处理按钮时发生错误：{e}")
    #
    # def hole_scan_no_host(self):
    #     """漏洞扫描 no host"""
    #     self.click_element(asset['hole_scan'])
    #     self.click_element(base_page['confirm'])
    #
    # def export_hole_scan_no_host(self):
    #     """导出no host"""
    #     self.click_element(asset['export'])
    #
    # def export_hole_scan_one_host(self):
    #     """导出one host"""
    #     self.click_element(asset['host_name'])
    #     self.click_element(asset['export_cve_info'])
    #
    # def create_cve_task_nocve(self, taskname):
    #     """生成修复任务　no cve"""
    #     self.click_element(asset['create_repair_task'])
    #     self.input_text(asset['task_name'], taskname)
    #     self.click_element(asset['create_repo'])
    #     self.click_element(asset['close'])
    #
    # def create_cve_task_onecve(self, taskname):
    #     """生成修复任务　one cve"""
    #     self.click_element(asset['checkbox_1'])
    #     self.click_element(asset['create_repair_task'])
    #     self.input_text(asset['task_name'], taskname)
    #     self.click_element(asset['execute_immediately'])
    #     self.click_element(asset['close'])
    #
    # def create_cve_task_morecve(self, taskname):
    #     """生成修复任务　one cve"""
    #     self.click_element(asset['checkbox_1'])
    #     self.click_element(asset['checkbox_2'])
    #     self.click_element(asset['create_repair_task'])
    #     self.input_text(asset['task_name'], taskname)
    #     self.click_element(base_page['cancel'])
    #
    # def view_nocve(self):
    #     """生成修复任务　no cve"""
    #     self.click_element(asset['no_cve'])
    #
    # def view_onecve(self):
    #     """生成修复任务　no cve"""
    #     self.click_element(asset['one_cve'])
    #
    # def view_host1(self):
    #     """生成修复任务　no cve"""
    #     self.click_element(asset['host_name'])
    #
    # def view_task(self):
    #     """查看task页面"""
    #     self.click_element(asset['task'])
    #     self.click_element(asset['task_page'])
    #

