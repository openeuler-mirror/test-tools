# -*-coding:utf-8-*-
from Aops_Web_Auto_Test.page_object.base_page import CommonPagingWebPage
from Aops_Web_Auto_Test.common.readelement import Element

vulner = Element('vulnerability')


class VulnerabilityPage(CommonPagingWebPage):

    def enter_cve_menu(self):
        """
        进入漏洞管理-CVEs菜单
        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['cves'])
        self.element_displayed(vulner['cve_page_title'])
        self.log.info("进入漏洞管理-CVEs菜单")

    def enter_host_menu(self):
        """
        进入漏洞管理-主机列表菜单
        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['hosts'])
        self.element_displayed(vulner['host_list_page_title'])
        self.log.info("进入漏洞管理-主机列表菜单")

    def enter_task_menu(self):
        """
        进入漏洞管理-任务菜单
        """
        expanded = self.get_element_attr(vulner['vulnerability'], 'aria-expanded')
        if expanded == "false":
            self.click_element(vulner['vulnerability'])
        self.click_element(vulner['task'])
        self.element_displayed(vulner['task_list_page_title'])
        self.log.info("进入漏洞管理-任务菜单")

    def add_repo(self, cluster_name, reponame, repo_content=None, filename=None, action="confirm"):
        """
        添加一个仓库，可以通过上传文件或直接提供内容。

        参数:
            cluster_name (str): 要添加仓库的集群名称。
            reponame (str): 仓库名称。
            repo_content (str, optional): 仓库内容作为字符串，或 None 以从 `filename` 读取。
            filename (str, optional): 如果 `repo_content` 为 None，则读取仓库文件内容的路径。
            action (str): 填写表单后要采取的操作，可以是 "confirm" 或 "cancel"。

        返回:
            None
        """
        self.click_element(vulner['add_repo'])
        # self.element_displayed(vulner['add_repo_page_title'])
        self.select_cluster(cluster_name)
        self.input_text(vulner['add_repo_name'], reponame)

        if repo_content is not None:
            self.input_text(vulner['add_repo_data'], repo_content)
            self.log.info("输入repo内容： {}".format(repo_content))
        elif filename is not None:
            self.upload_file(filename)
            self.log.info("上传repo文件： {}".format(repo_content))
        else:
            raise ValueError("Either repo_content or filename must be provided.")
        try:
            if action == "confirm":
                self.click_confirm_button()
            elif action == "cancel":
                self.click_cancel_button()
            else:
                raise ValueError("action parameter must be 'confirm' or 'cancel'")
        except Exception as e:
            print(f"Error processing buttons: {e}")

    def set_repo(self, taskname, clustername, reponame, taskdesc, action1="create", action2="close"):
        """
        为主机设置仓库

        参数:
            taskname (str): 输入任务名称
            taskdesc (str): 输入任务描述
            clustername (str): 选择集群
            reponame (str): 选择仓库
            action1 (str): 主要动作，可以是 "create"（创建）、"cancel"（取消）或 "execute"（执行）
            action2 (str): 次要动作，可以是 "close"（关闭）或 "jump"（跳转）

        返回:
            None
        """
        self.click_element(vulner['set_repo_button'])
        self.element_displayed(vulner['set_repo_page_title'])
        self.element_displayed(vulner['set_repo_page_type'])
        self.clear_before_input_text(vulner['task_name'], taskname)
        self.select_cluster(clustername)
        self.select_value_by_dropdown(vulner['select_repo'], reponame, is_scroll='yes')
        self.clear_before_input_text(vulner['task_desc'], taskdesc)
        self.handle_task_operations(action1=action1, action2=action2)

    def execute_task(self, task_name):
        """
        执行任务

        参数:
            task_name (str): 输入任务名称
        返回:
            None
        """
        execute_task_in_list = self.replace_locator_text(vulner['execute_in_task_list'], task_name)
        execute_task_in_task_detail = self.replace_locator_text(vulner['execute_in_task_detail'], task_name)
        if self.find_element(execute_task_in_list):
            self.click_element(execute_task_in_list)
            self.log.info(f"在任务列表中执行任务： {task_name}")
        else:
            self.click_element(execute_task_in_task_detail)
            self.log.info(f"在任务详情中执行任务： {task_name}")

    def handle_task_operations(self, action1="create", action2="close"):
        """
        根据提供的动作参数处理任务操作

        参数:
            action1 (str): 主要动作，可以是 "create"（创建）、"cancel"（取消）或 "execute"（执行）
            action2 (str): 次要动作，可以是 "close"（关闭）或 "jump"（跳转）

        返回:
            None
        """
        valid_actions1 = {"create", "cancel", "execute"}
        valid_actions2 = {"close", "jump"}

        if action1 not in valid_actions1:
            raise ValueError(f"无效的 action1 参数，必须是 {', '.join(valid_actions1)}")
        if action2 not in valid_actions2:
            raise ValueError(f"无效的 action2 参数，必须是 {', '.join(valid_actions2)}")

        try:
            if action1 == "cancel":
                self.click_cancel_button()
            elif action1 == "create":
                self.click_element(vulner['create_task'])
            elif action1 == "execute":
                self.click_element(vulner['execute_task'])

            if action1 in {"create", "execute"}:
                if action2 == "close":
                    self.click_element(vulner['close'])
                elif action2 == "jump":
                    self.click_element(vulner['jump_link'])
                    self.element_displayed(vulner['task_list_page_title'])
                self.element_invisibility(vulner['jump_link'])
        except KeyError as ke:
            print(f"键错误：{ke}")
        except ValueError as ve:
            print(f"值错误：{ve}")
        except Exception as e:
            print(f"处理按钮时发生未知错误：{e}")

    def check_repo_name_in_list(self, repo_name):
        """
        检查仓库名称是否在仓库列表中

        参数:
            repo_name (str): 输入仓库名称

        返回:
            WebElement: 找到的元素
        """
        new_loc = self.replace_locator_text(vulner['repo_name'], repo_name)
        return self.find_element(new_loc)

    def find_task_name_from_task_list(self, task_name):
        """
        从任务列表中查找任务名称

        参数:
            task_name (str): 任务名称

        返回:
            WebElement: 找到的元素
        """
        new_task_name = self.replace_locator_text(vulner['task_name_in_task_list'], task_name)
        return self.find_element(new_task_name)

    def check_cve_in_cve_table(self, cve):
        """
        检查CVE是否存在于CVE表格中

        此方法通过替换定位器中的CVE来构造新的定位器，然后使用该定位器查找元素

        参数:
            cve (str): CVE编号，用于替换定位器中的变量部分

        返回:
            WebElement: 根据构造后的定位器找到的元素
        """
        new_task_name = self.replace_locator_text(vulner['cve_in_cve_table'], cve)
        return self.find_element(new_task_name)

    def delete_task(self, task_name, action="confirm"):
        """
        删除任务

        参数:
            task_name (str): 任务名称
            action (str): 操作，可以是 "confirm" 或 "cancel"

        返回:
            None
        """
        new_task_name = self.replace_locator_text(vulner['delete_task'], task_name)
        self.click_element(new_task_name)
        try:
            if action == "confirm":
                self.click_confirm_button()
                self.log.info("成功删除任务：{}".format(task_name))
            elif action == "cancel":
                self.click_cancel_button()
                self.log.info("取消删除任务：{}".format(task_name))
            else:
                raise ValueError("action 参数必须是 cancel 或 confirm")
        except Exception as e:
            print(f"删除任务时发生错误：{e}")

    def delete_repo(self, repo_name, action="confirm"):
        """
        删除仓库

        参数:
            repo_name (str): 仓库名称
            action (str): 操作，可以是 "confirm" 或 "cancel"

        返回:
            None
        """
        new_loc = self.replace_locator_text(vulner['repo_delete'], repo_name)
        self.click_element(new_loc)
        try:
            if action == "confirm":
                self.click_confirm_button()
                self.element_invisibility(vulner['delete_repo_message'])
            elif action == "cancel":
                self.click_cancel_button()
                self.element_invisibility(vulner['delete_repo_message'])
            else:
                raise ValueError("action 参数必须是 cancel 或 confirm")
        except Exception as e:
            print(f"处理按钮时发生错误：{e}")

    def search_repo(self, repo_name):
        """
        搜索仓库

        参数:
            repo_name (str): 仓库名称

        返回:
            None
        """
        self.search_by_placeholder("REPO", repo_name)

    def search_cve(self, search_text):
        """
        根据 CVE ID 或包名搜索仓库

        参数:
            search_text (str): 要搜索的 CVE ID 或包名，可以为空

        返回:
            None

        异常:
            Exception: 如果搜索过程中发生其他未知错误
        """
        try:
            self.search_by_placeholder("按cve id或package搜索", search_text)
        except Exception as e:
            self.log.error(f"搜索失败，原因: {e}")
            raise Exception(f"搜索失败: {e}") from e

    def check_task_execute_status(self, task_name):
        """
        检查任务执行状态

        参数:
            task_name (str): 任务名称

        返回:
            WebElement: 找到的元素
        """
        new_loc = self.replace_locator_text(vulner["task_execute_status"], task_name)
        return self.find_element(new_loc)

    def upload_security_advisory(self, file_name, affect='unaffected', action='upload'):
        """
        上传安全公告

        参数:
            file_name (str): 安全公告文件，支持 zip，xml
            affect (str): 影响，可以是 'unaffected' 或 'affected'
            action (str): 操作，可以是 "upload" 或 "cancel"

        返回:
            None
        """
        self.click_element(vulner['upload_sa'])
        self.element_displayed(vulner['upload_sa_title'])
        self.upload_file(file_name)
        self.select_value_by_radio_button(affect)
        if action == "upload":
            self.click_element(vulner['upload_button'])
        elif action == 'cancel':
            self.click_close_button()
        else:
            raise ValueError("action 参数必须是 cancel 或 upload")

    def get_publish_time(self) -> list:
        """
        以列表格式返回获取的发布时间

        返回:
            list: 发布时间列表
        """
        publish_time = []
        for tr in self.get_table_text():
            if len(tr) == 1:
                publish_time.append("")
            else:
                publish_time.append(tr[1])
        return publish_time

    def get_cvss_score(self) -> list:
        """
        以列表格式返回获取的 CVSS 分数

        返回:
            list: CVSS 分数列表
        """
        cvss_score = []
        for tr in self.get_table_text():
            if len(tr) <= 2:
                cvss_score.append("")
            else:
                cvss_score.append(tr[4])
        return cvss_score

    def get_host_num_from_cve_list(self) -> list:
        """
        以列表格式返回获取的 CVE 关联的主机数

        返回:
            list: 主机数列表
        """
        host_num = []
        for tr in self.get_table_text():
            if len(tr) <= 2:
                host_num.append("")
            else:
                host_num.append(tr[5])
        return host_num

    def create_cve_fix_task(self, taskname, task_desc, cves=None, fix_way=None,action1="create", action2="close"):
        """
        选择 CVE 并生成修复任务

        参数:
            taskname (str): 任务名称
            task_desc (str): 任务描述
            cves (list, optional): 需要选择的 CVE 列表，默认为 None，表示不选任何 CVE
                - None: 不选任何 CVE
                - []: 全选所有 CVE
                - [CVE-xxxx]: 选择指定的 CVE
            action1 (str): 主要动作，可以是 "create"（创建）、"cancel"（取消）或 "execute"（执行）
            action2 (str): 次要动作，可以是 "close"（关闭）或 "jump"（跳转）

        返回:
            None
        """

        if cves is None:
            pass
        elif not cves:
            self.click_element(vulner['select_all_checkbox'])
        else:
            self.select_specific_cves(cves, fix_way)
        self.enter_cve_fix_page()
        self.input_task_name(taskname)
        self.input_task_desc(task_desc)
        self.handle_task_operations(action1=action1, action2=action2)

    def enter_cve_fix_page(self):
        """
        进入 CVE 修复页面
        """
        self.click_element(vulner['cve_fix_button'])
        self.find_element(vulner['cve_fix_title'])
        self.log.info("进入生成CVE修复任务页面")

    def input_task_name(self, task_name):
        """
        输入任务名称

        参数:
        task_name (str): 任务名称

        """
        self.clear_before_input_text(vulner['task_name'], task_name)
        self.log.info(f"输入任务名称: {task_name}")

    def input_task_desc(self, task_desc):
        """
        输入任务描述

        参数:
        task_desc (str): 任务描述

        """
        self.clear_before_input_text(vulner['task_desc'], task_desc)
        self.log.info(f"输入任务描述: {task_desc}")

    def select_specific_cves(self, cves, fix_way=None):
        """
        选择指定的 CVE

        参数:
            cves (list/str): 需要选择的 CVE

        返回:
            None
        """
        if isinstance(cves, str):
            cves = [cves]
        elif not isinstance(cves, list):
            raise TypeError("参数 cves 必须是列表或字符串类型")

        if not cves:
            self.log.warning("cves 列表为空，没有 CVE 可以选择")
            return
        try:
            for cve_id in cves:
                if fix_way:
                    self.select_fix_way(cve_id, fix_way)
                    self.log.info(f"使用 修复cve : {fix_way}{cve_id}")
                else:
                    new_loc = self.replace_locator_text(vulner['select_cve'], cve_id)
                    self.click_element(new_loc)
                    self.log.info(f"选择了 CVE: {cve_id}")
        except Exception as e:
            raise Exception(f"选择指定 CVE 失败: {e}")

    def select_specific_host(self, hosts):
        """
        选择指定的host

        参数:
            hosts (list/str): 需要选择的host

        返回:
            None
        """
        if isinstance(hosts, str):
            hosts = [hosts]
        elif not isinstance(hosts, list):
            raise TypeError("参数 cves 必须是列表或字符串类型")

        if not hosts:
            self.log.warning("cves 列表为空，没有 CVE 可以选择")
            return
        try:
            for host in hosts:
                self.select_host_by_checkbox(host)
                self.log.info(f"从列表选中主机: {host}")
        except Exception as e:
            raise Exception(f"从列表选中主机失败: {e}")

    def select_fix_way(self, cve_id, fix_way=None):
        """
        选择指定的 CVE

        参数:
            cves (list): 需要选择的 CVE 列表

        返回:
            None
        """
        if fix_way:
            cve = self.replace_locator_text(vulner['cve_rpm_tr_in_cve_table'], cve_id)
            select_cve = self.replace_locator_text(cve, old_value="@@@@", new_value=fix_way)
            self.click_element(select_cve)

    def host_is_checked(self, hosts=None):
        """
        判断生成CVE修复任务页面的主机是否被选中
        参数:
        hosts (list | tuple | None): 要检查的主机列表如果为None，则检查所有主机是否被选中

        返回:
        bool: 如果主机被选中返回True，否则返回False
        """
        if hosts is None:
            if "checked" in self.get_element_attr(vulner['select_all_host'], 'class'):
                return True
            else:
                return False
        elif not isinstance(hosts, (list, tuple)):
            raise ValueError("参数 'hosts' 必须是列表或元组类型")
        for host in hosts:
            new_loc = self.replace_locator_text(vulner['select_host'], host)
            if "ant-checkbox-wrapper-checked" in self.get_element_attr(new_loc, 'class'):
                return True
            else:
                return False

    def select_host_by_checkbox(self, hosts):
        """
        生成CVE修复任务页面,选择主机
        参数:
            hosts: 主机列表，用于选择主机
        """
        if isinstance(hosts, str):
            hosts = [hosts]
        elif not isinstance(hosts, list):
            raise TypeError("参数 cves 必须是列表或字符串类型")

        if not isinstance(hosts, (list, tuple)):
            raise ValueError("参数 'hosts' 必须是列表或元组类型")

        try:
            for host in hosts:
                new_loc = self.replace_locator_text(vulner['select_host'], host)
                self.click_element(new_loc)
        except KeyError as e:
            print(f"键错误: {e}。请确保 'host' 存在于hosts中")
        except Exception as e:
            print(f"发生未知错误: {e}")

    def click_selected_all_button(self):
        """
        生成CVE修复任务页面,点击全选按钮
        """
        if self.find_element(vulner['ant_drawer_content']):
            self.click_element(vulner['ant_drawer_select_all'])

        else:
            self.click_element(vulner['select_all_host'])

    def click_cve_expand_icon(self, cve_id):
        """
        生成CVE修复任务页面,点击"+"icon
        """

        new_loc = self.replace_locator_text(vulner['cve_expand-icon'], cve_id)
        if self.find_element(vulner['cve_fix_title']):
            self.click_element(new_loc)
        else:
            new_loc = self.replace_locator_text(vulner['cve_expand-icon_in_cve_table'], cve_id)
            self.click_element(new_loc)

    def check_expand_icon(self, cve_id):
        """
        判断展开行是否展开生成CVE修复任务页面,点击"+"icon
        """
        if self.find_element(vulner['cve_fix_title']):
            new_loc = self.replace_locator_text(vulner['cve_expand-icon'], cve_id)
            if "true" in self.get_element_attr(new_loc, 'aria-expanded'):
                return True
            else:
                return False
        else:
            new_loc = self.replace_locator_text(vulner['cve_expand-icon_in_cve_table'], cve_id)
            if "true" in self.get_element_attr(new_loc, 'aria-expanded'):
                return True
            else:
                return False

    def get_cve_package_list(self, cve_id):
        """
        获取CVE修复任务页面,获取CVE的包列表
        """
        new_loc = self.replace_locator_text(vulner['cve_rpm_tr'], cve_id)
        table_rows = self.find_elements(new_loc)
        package_list = []
        for row in table_rows:
            affected_rpm = row.find_element_by_xpath("./td[2]").text
            available_rpm = row.find_element_by_xpath("./td[3]").text
            fix_way = row.find_element_by_xpath("./td[4]").text

            package_info = {
                "affected_rpm": affected_rpm,
                "available_rpm": available_rpm,
                "fix_way": fix_way
            }
            package_list.append(package_info)
        return package_list

