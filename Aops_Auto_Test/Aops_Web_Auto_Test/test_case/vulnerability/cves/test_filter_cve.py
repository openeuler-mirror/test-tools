# -*-coding:utf-8-*-
import pytest
from Aops_Web_Auto_Test.page_object.vulnerability import VulnerabilityPage


@pytest.fixture(scope='class')
def cve(drivers) -> VulnerabilityPage:
    return VulnerabilityPage(drivers)


class TestFilterCve:

    @pytest.fixture(scope='function', autouse=True)
    def refresh_page(self, cve):
        yield
        cve.click_refresh_button()

    def test_filter_cve_001_search(self, cve):
        cve.enter_cve_menu()
        #模糊匹配
        cve.search_by_placeholder("按cve id或package搜索", "CVE")
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        for result in search_result:
            assert "CVE" in result[0] or "CVE" in result[2], "搜索结果不包含 'CVE'"
        #精确匹配
        cve.search_by_placeholder("按cve id或package搜索", "CVE-2023-1069")
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        for result in search_result:
            assert "CVE-2023-1069" in result[0] or "CVE" in result[2], "搜索结果不包含 'CVE-2023-1069'"
        #搜索空字符
        cve.search_by_placeholder("按cve id或package搜索", "")
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        for result in search_result:
            assert "CVE" in result[0] or "CVE" in result[2], "搜索结果不包含 'CVE'"
        #搜索字符长度超过40
        cve.search_by_placeholder("按cve id或package搜索", "CVE-2020-36777CVE-2020-36777CVE-2020-367C")
        search_result = cve.get_table_text()
        assert search_result[0][0] == "暂无数据", "搜索不存在的cve，搜索结果错误"
        #搜索特殊字符
        cve.search_by_placeholder("按cve id或package搜索", "！@#￥%……&*（）")
        search_result = cve.get_table_text()
        assert search_result[0][0] == "暂无数据", "搜索特殊字符，搜索结果错误"

    def test_filter_cve_002_sort_by_cve_id(self, cve):
        cve.enter_cve_menu()
        #检查默认排序
        assert "active" not in cve.get_sort_status("CVE_ID", action="up")
        assert "active" not in cve.get_sort_status("CVE_ID", action="down")
        #CVE_ID升序
        cve.sort("CVE_ID")
        assert "active" in cve.get_sort_status("CVE_ID", action="up")
        assert cve.is_sorted_ascending(cve.get_table_text())
        #CVE_ID降序
        cve.sort("CVE_ID")
        assert "active" in cve.get_sort_status("CVE_ID", action="down")
        assert cve.is_sorted_descending(cve.get_table_text())
        #取消排序
        cve.sort("CVE_ID")
        assert "active" not in cve.get_sort_status("CVE_ID", action="up")
        assert "active" not in cve.get_sort_status("CVE_ID", action="down")

    def test_filter_cve_003_sort_by_publish_time(self, cve):
        cve.enter_cve_menu()
        # 检查默认排序
        assert "active" not in cve.get_sort_status("发布时间", action="up")
        assert "active" not in cve.get_sort_status("发布时间", action="down")
        # 发布时间升序
        cve.sort("发布时间")
        assert "active" in cve.get_sort_status("发布时间", action="up")
        assert cve.is_sorted_ascending(cve.get_publish_time())
        # 发布时间降序
        cve.sort("发布时间")
        assert "active" in cve.get_sort_status("发布时间", action="down")
        assert cve.is_sorted_descending(cve.get_publish_time())
        # 取消排序
        cve.sort("发布时间")
        assert "active" not in cve.get_sort_status("发布时间", action="up")
        assert "active" not in cve.get_sort_status("发布时间", action="down")

    def test_filter_cve_004_sort_by_cvss_score(self, cve):
        cve.enter_cve_menu()
        # 检查默认排序
        assert "active" not in cve.get_sort_status("CVSS 分数", action="up")
        assert "active" not in cve.get_sort_status("CVSS 分数", action="down")
        # 发布时间升序
        cve.sort("CVSS 分数")
        assert "active" in cve.get_sort_status("CVSS 分数", action="up")
        assert cve.is_sorted_ascending(cve.get_cvss_score())
        # 发布时间降序
        cve.sort("CVSS 分数")
        assert "active" in cve.get_sort_status("CVSS 分数", action="down")
        assert cve.is_sorted_descending(cve.get_cvss_score())
        # 取消排序
        cve.sort("CVSS 分数")
        assert "active" not in cve.get_sort_status("CVSS 分数", action="up")
        assert "active" not in cve.get_sort_status("CVSS 分数", action="down")

    def test_filter_cve_005_sort_by_host(self, cve):
        cve.enter_cve_menu()
        # 检查默认排序
        assert "active" not in cve.get_sort_status("主机", action="up")
        assert "active" not in cve.get_sort_status("主机", action="down")
        # 主机升序
        cve.sort("主机")
        assert "active" in cve.get_sort_status("主机", action="up")
        print(cve.get_host_num_from_cve_list())
        assert cve.is_sorted_ascending(cve.get_host_num_from_cve_list())
        #主机降序
        cve.sort("主机")
        assert "active" in cve.get_sort_status("主机", action="down")
        assert cve.is_sorted_descending(cve.get_host_num_from_cve_list())
        #取消排序
        cve.sort("主机")
        assert "active" not in cve.get_sort_status("主机", action="up")
        assert "active" not in cve.get_sort_status("主机", action="down")

