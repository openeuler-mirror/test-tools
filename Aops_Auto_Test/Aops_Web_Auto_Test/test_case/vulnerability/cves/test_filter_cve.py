# -*-coding:utf-8-*-
import time
from math import ceil

import pytest

from Aops_Web_Auto_Test.common.readconfig import ini
from Aops_Web_Auto_Test.page_object.vulnerability import VulnerabilityPage,vulner


@pytest.fixture(scope='class')
def cve(drivers) -> VulnerabilityPage:
    return VulnerabilityPage(drivers)


class TestFilterCve:

    @pytest.fixture(scope='function', autouse=True)
    def refresh_page(self, cve):
        yield
        cve.click_refresh_button()

    def test_filter_cve_001_search(self, cve):
        cve.enter_cve_menu()
        #模糊匹配
        cve.search_by_placeholder("按cve id或package搜索", "CVE")
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        for result in search_result:
            assert "CVE" in result[0] or "CVE" in result[2], "搜索结果不包含 'CVE'"
        #精确匹配
        cve.search_by_placeholder("按cve id或package搜索", "CVE-2023-1069")
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        for result in search_result:
            assert "CVE-2023-1069" in result[0] or "CVE" in result[2], "搜索结果不包含 'CVE-2023-1069'"
        #搜索空字符
        cve.search_by_placeholder("按cve id或package搜索", "")
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        for result in search_result:
            assert "CVE" in result[0] or "CVE" in result[2], "搜索结果不包含 'CVE'"
        #搜索字符长度超过40
        cve.search_by_placeholder("按cve id或package搜索", "CVE-2020-36777CVE-2020-36777CVE-2020-367C")
        search_result = cve.get_table_text()
        assert search_result[0][0] == "暂无数据", "搜索不存在的cve，搜索结果错误"
        #搜索特殊字符
        cve.search_by_placeholder("按cve id或package搜索", "！@#￥%……&*（）")
        search_result = cve.get_table_text()
        assert search_result[0][0] == "暂无数据", "搜索特殊字符，搜索结果错误"

    def test_filter_cve_002_sort_by_cve_id(self, cve):
        cve.enter_cve_menu()
        #检查默认排序
        assert "active" not in cve.get_sort_status("CVE_ID", action="up")
        assert "active" not in cve.get_sort_status("CVE_ID", action="down")
        #CVE_ID升序
        cve.sort("CVE_ID")
        assert "active" in cve.get_sort_status("CVE_ID", action="up")
        assert cve.is_sorted_ascending(cve.get_table_text())
        #CVE_ID降序
        cve.sort("CVE_ID")
        assert "active" in cve.get_sort_status("CVE_ID", action="down")
        assert cve.is_sorted_descending(cve.get_table_text())
        #取消排序
        cve.sort("CVE_ID")
        assert "active" not in cve.get_sort_status("CVE_ID", action="up")
        assert "active" not in cve.get_sort_status("CVE_ID", action="down")

    def test_filter_cve_003_sort_by_publish_time(self, cve):
        cve.enter_cve_menu()
        # 检查默认排序
        assert "active" not in cve.get_sort_status("发布时间", action="up")
        assert "active" not in cve.get_sort_status("发布时间", action="down")
        # 发布时间升序
        cve.sort("发布时间")
        assert "active" in cve.get_sort_status("发布时间", action="up")
        assert cve.is_sorted_ascending(cve.get_publish_time())
        # 发布时间降序
        cve.sort("发布时间")
        assert "active" in cve.get_sort_status("发布时间", action="down")
        assert cve.is_sorted_descending(cve.get_publish_time())
        # 取消排序
        cve.sort("发布时间")
        assert "active" not in cve.get_sort_status("发布时间", action="up")
        assert "active" not in cve.get_sort_status("发布时间", action="down")

    def test_filter_cve_004_sort_by_cvss_score(self, cve):
        cve.enter_cve_menu()
        # 检查默认排序
        assert "active" not in cve.get_sort_status("CVSS 分数", action="up")
        assert "active" not in cve.get_sort_status("CVSS 分数", action="down")
        # 发布时间升序
        cve.sort("CVSS 分数")
        assert "active" in cve.get_sort_status("CVSS 分数", action="up")
        assert cve.is_sorted_ascending(cve.get_cvss_score())
        # 发布时间降序
        cve.sort("CVSS 分数")
        assert "active" in cve.get_sort_status("CVSS 分数", action="down")
        assert cve.is_sorted_descending(cve.get_cvss_score())
        # 取消排序
        cve.sort("CVSS 分数")
        assert "active" not in cve.get_sort_status("CVSS 分数", action="up")
        assert "active" not in cve.get_sort_status("CVSS 分数", action="down")

    def test_filter_cve_005_sort_by_host(self, cve):
        cve.enter_cve_menu()
        # 检查默认排序
        assert "active" not in cve.get_sort_status("主机", action="up")
        assert "active" not in cve.get_sort_status("主机", action="down")
        # 主机升序
        cve.sort("主机")
        assert "active" in cve.get_sort_status("主机", action="up")
        assert cve.is_sorted_ascending(cve.get_host_num_from_cve_list())
        #主机降序
        cve.sort("主机")
        assert "active" in cve.get_sort_status("主机", action="down")
        assert cve.is_sorted_descending(cve.get_host_num_from_cve_list())
        #取消排序
        cve.sort("主机")
        assert "active" not in cve.get_sort_status("主机", action="up")
        assert "active" not in cve.get_sort_status("主机", action="down")

    def test_filter_cve_006_filter_by_severity(self, cve):
        cve.enter_cve_menu()
        filter_option = ["严重", "高风险", "中风险", "低风险", "未知"]
        cve.filter_cve("严重性",filter_option, action="confirm")
        severity_value_list = set(cve.get_column_data_all_pages(6)[1])
        non_severity = [value for value in severity_value_list if value not in ["Critical", 'Medium', 'High', 'Low', "Unknown"]]
        assert not non_severity
        column = cve.replace_locator_text(vulner['filter_column'], new_value="严重性")
        cve.click_element(column)
        cve.click_element(vulner['filter_reset'])
        for value in filter_option:
            new_loc = cve.replace_locator_text(vulner['filter_option'], value)
            assert not "selected" in cve.get_element_attr(new_loc, "class")

    def test_cve_list_001_previous_page_data_check(self, cve):
        """CVE列表-非首页上一页返回验证"""
        cve.enter_cve_menu()
        cve.first_page.click()
        page_data = list(map(lambda td: td.text, cve.get_table_column_data()))
        cve.next_page_button.click()
        cve.previous_page_button.click()
        page_data_back = list(map(lambda td: td.text, cve.get_table_column_data()))
        assert page_data == page_data_back

    def test_cve_list_002_next_page_data_check(self, cve):
        """CVE列表-非末页下一页跳转验证"""
        cve.enter_cve_menu()
        cve.first_page.click()
        cve.next_page_button.click()
        time.sleep(2)
        page_data = list(map(lambda td: td.text, cve.get_table_column_data(3)))
        cve.previous_page_button.click()
        cve.next_page_button.click()
        time.sleep(2)
        page_data_back = list(map(lambda td: td.text, cve.get_table_column_data(3)))
        assert page_data == page_data_back

    def test_cve_list_003_previous_page_button_disabled(self, cve):
        """CVE列表-首页上一页按钮禁用验证"""
        cve.enter_cve_menu()
        cve.first_page.click()
        previous_button = cve.previous_page_button
        previous_button_aria_disabled_status = previous_button.get_attribute('aria-disabled')
        assert previous_button_aria_disabled_status == 'true'

    def test_cve_list_004_last_page_button_disabled(self, cve):
        """CVE列表-末页下一页按钮禁用验证"""
        cve.enter_cve_menu()
        cve.last_page.click()
        next_page_button = cve.next_page_button
        next_page_button_aria_disabled_status = next_page_button.get_attribute('aria-disabled')
        assert next_page_button_aria_disabled_status == 'true'

    def test_cve_list_005_per_page_data(self, cve):
        """CVE列表-选择每页显示10/20/30/40条数据"""
        cve.enter_cve_menu()
        total_num = int(cve.get_total_num()[2:-1])
        cve.select_per_page(10)
        assert cve.count_table_rows() == 10
        assert int(cve.last_page.text) == ceil(total_num/10)
        cve.select_per_page(20)
        time.sleep(1)
        assert cve.count_table_rows() == 20
        assert int(cve.last_page.text) == ceil(total_num/20)
        cve.select_per_page(30)
        time.sleep(1)
        assert cve.count_table_rows() == 30
        assert int(cve.last_page.text) == ceil(total_num/30)
        cve.select_per_page(40)
        time.sleep(1)
        assert cve.count_table_rows() == 40
        assert int(cve.last_page.text) == ceil(total_num/40)

    def test_cve_detail_001_search_host(self, cve):
        cves = ini._get("CVE1", "cve_id")
        host_name = ini._get("CLUSTER.GROUP1.HOST", "CLUSTER_NAME1.GROUP1.HOSTNAME1")
        cve.enter_cve_menu()
        cve.search_cve(cves)
        cve.enter_cve_detail_page(cves)
        #模糊匹配
        cve.search_by_placeholder("按主机名搜索", "host")
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        for result in search_result:
            assert "host" in result[0], "搜索结果不包含 'host'"
        #精确匹配
        cve.search_by_placeholder("按主机名搜索",host_name)
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        for result in search_result:
            assert host_name in result[0], f"搜索结果不包含 {host_name}"
        #搜索空字符
        cve.search_by_placeholder("按主机名搜索", "")
        search_result = cve.get_table_text()
        assert len(search_result) > 0, "未找到任何搜索结果"
        #搜索字符长度超过40
        cve.search_by_placeholder("按主机名搜索", "CVE-2020-36777CVE-2020-36777CVE-2020-367C")
        search_result = cve.get_table_text()
        assert search_result[0][0] == "暂无数据", "搜索不存在的host，搜索结果错误"
        #搜索特殊字符
        cve.search_by_placeholder("按主机名搜索", "！@#￥%……&*（）")
        search_result = cve.get_table_text()
        assert search_result[0][0] == "暂无数据", "搜索特殊字符，搜索结果错误"



