# -*-coding:utf-8-*-
import time
import pytest
from Aops_Web_Auto_Test.common import createtestdata
from Aops_Web_Auto_Test.common.readconfig import ini
from Aops_Web_Auto_Test.page_object.vulnerability import VulnerabilityPage, vulner


@pytest.fixture(scope='class')
def cve(drivers) -> VulnerabilityPage:
    return VulnerabilityPage(drivers)


class TestCveFix:

    @pytest.fixture(scope="function", autouse=True)
    def create_data(self, cve):
        self.task_name = None
        yield
        if self.task_name:
            try:
                cve.enter_task_menu()
                cve.delete_task(self.task_name)
            except Exception as e:
                print(f"删除任务: {self.task_name}失败", e)
                pass
        if cve.find_element(vulner['cve_fix_title']):
            try:
                cve.click_cancel_button()
            except Exception as e:
                print(f"关闭生成CVE修复任务页面失败", e)
                pass

    def test_cve_fix_001_create_and_jump(self, cve):
        """生成cve修复任务-不选择cve-创建-跳转到任务页面"""
        cve.enter_cve_menu()
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        self.task_name = task_name
        cve.create_cve_fix_task(task_name, task_desc, action1="create", action2="jump")
        assert cve.find_task_name_from_task_list("冷补丁修复："+task_name)
        assert cve.find_task_name_from_task_list("热补丁修复："+task_name)

    def test_cve_fix_002_execute_and_close(self, cve):
        """生成cve修复任务-选择cve-执行-关闭"""
        cve.enter_cve_menu()
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        cves = ini._get("CVE1", "cve_id")
        self.task_name = task_name
        cve.create_cve_fix_task(task_name, task_desc, cves=cves, action1="execute", action2="close")
        cve.enter_task_menu()
        assert cve.find_task_name_from_task_list("冷补丁修复："+task_name)
        assert cve.find_task_name_from_task_list("热补丁修复："+task_name)

    def test_cve_fix_003_hotpatch(self, cve):
        """生成cve修复任务-热补丁修复-弹出框等待5秒钟，返回cve页面"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        cves = ini._get("CVE1", "cve_id")
        self.task_name = task_name
        cve.enter_cve_menu()
        cve.search_cve(cves)
        assert cve.check_cve_in_cve_table(cves)
        cve.click_cve_expand_icon(cves)
        assert cve.check_expand_icon(cves)
        cve.create_cve_fix_task(task_name, task_desc, cves=cves, fix_way="hotpatch", action2="wait")
        cve.enter_task_menu()
        assert cve.find_task_name_from_task_list(task_name)

    def test_cve_fix_004_clodpatch(self, cve):
        """生成cve修复任务-冷补丁修复"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        cves = ini._get("CVE1", "cve_id")
        self.task_name = task_name
        cve.enter_cve_menu()
        cve.search_cve(cves)
        assert cve.check_cve_in_cve_table(cves)
        cve.click_cve_expand_icon(cves)
        assert cve.check_expand_icon(cves)
        cve.create_cve_fix_task(task_name, task_desc, cves=cves, fix_way="coldpatch")
        cve.enter_task_menu()
        assert cve.find_task_name_from_task_list(task_name)

    def test_cve_fix_005_with_coldpatch_hotpatch(self, cve):
        """生成cve修复任务-指定cve修复-包含冷、热补丁"""
        cve.enter_cve_menu()
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        self.task_name = task_name
        cve.create_cve_fix_task(task_name, task_desc, cves=[ini._get("CVE1", "cve_id")])
        cve.enter_task_menu()
        assert cve.find_task_name_from_task_list("冷补丁修复：" + task_name)
        assert cve.find_task_name_from_task_list("热补丁修复：" + task_name)

    def test_cve_fix_006_cancel(self, cve):
        """生成cve修复任务-不选择cve-创建-跳转到任务页面"""
        cve.enter_cve_menu()
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        cve.create_cve_fix_task(task_name, task_desc, action1="cancel")
        cve.enter_task_menu()
        assert not cve.find_task_name_from_task_list("冷补丁修复："+task_name)

    def test_cve_fix_007_verify_task_name(self, cve):
        """生成cve修复任务-检查任务名称的有效性"""
        cve.enter_cve_menu()
        task_name = createtestdata.task_name(min_len=21, max_len=22)
        task_desc = createtestdata.task_desc()
        cve.create_cve_fix_task(task_name, task_desc)
        cve.enter_task_menu()
        self.task_name = task_name[:21]
        assert cve.find_task_name_from_task_list("冷补丁修复：" + self.task_name)
        assert cve.find_task_name_from_task_list("热补丁修复：" + self.task_name)
        cve.enter_cve_menu()
        cve.create_cve_fix_task("", task_desc)
        assert cve.get_item_explain_error("任务名称") == "请输入任务名称"

    def test_cve_fix_008_verify_task_description(self, cve):
        """生成cve修复任务-检查任务描述的有效性"""
        cve.enter_cve_menu()
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc(min_len=51, max_len=52)
        cve.create_cve_fix_task(task_name, task_desc)
        cve.enter_task_menu()
        self.task_name = task_name
        assert cve.find_task_name_from_task_list("冷补丁修复：" + task_name)
        assert cve.find_task_name_from_task_list("热补丁修复：" + task_name)
        cve.enter_cve_menu()
        task_name = createtestdata.task_name()
        cve.create_cve_fix_task(task_name, "")
        assert cve.get_item_explain_error("任务描述") == "请输入任务描述"

    def test_cve_fix_010_without_host(self, cve):
        """生成cve修复任务-不选择主机"""
        cves = ini._get("CVE1", "cve_id")
        cve.enter_cve_menu()
        cve.select_specific_cves(cves)
        cve.enter_cve_fix_page()
        time.sleep(3)
        cve.click_cve_expand_icon(cves)
        assert cve.check_expand_icon(cves)
        assert cve.host_is_checked()
        cve.click_selected_all_button()
        assert not cve.host_is_checked()
        cve.click_element(vulner['create_task'])
        assert "请至少选择一个cve下的一台主机进行cve修复!" in cve.get_notice_text()

    def test_cve_fix_011_with_host(self, cve):
        """生成cve修复任务-选择主机(选择第一个主机)"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        cves = ini._get("CVE1", "cve_id")
        hosts = [ini._get("CLUSTER.GROUP1.HOST", "CLUSTER_NAME1.GROUP1.HOSTIP1")]
        self.task_name = task_name
        cve.enter_cve_menu()
        cve.enter_cve_fix_page()
        cve.input_task_name(task_name)
        cve.input_task_desc(task_desc)
        cve.click_cve_expand_icon(cves)
        assert cve.check_expand_icon(cves)
        cve.click_selected_all_button()
        assert not cve.host_is_checked()
        cve.select_host_by_checkbox(hosts)
        assert cve.host_is_checked(hosts)
        cve.handle_task_operations(action1='execute')
        cve.enter_task_menu()
        assert cve.find_task_name_from_task_list("冷补丁修复：" + task_name)
        assert cve.find_task_name_from_task_list("热补丁修复：" + task_name)

    def test_cve_fix_012_cve_detail_with_host(self, cve):
        """CVE详情页面-生成cve修复任务-选择主机(选择第一个主机)"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        cves = ini._get("CVE1", "cve_id")
        hosts = [ini._get("CLUSTER.GROUP1.HOST", "CLUSTER_NAME1.GROUP1.HOSTIP1")]
        self.task_name = task_name
        cve.enter_cve_menu()
        cve.enter_cve_detail_page(cves)
        cve.create_cve_fix_task()
        cve.enter_cve_fix_page()
        cve.input_task_name(task_name)
        cve.input_task_desc(task_desc)
        cve.click_cve_expand_icon(cves)
        assert cve.check_expand_icon(cves)
        cve.click_selected_all_button()
        assert not cve.host_is_checked()
        cve.select_host_by_checkbox(hosts)
        assert cve.host_is_checked(hosts)
        cve.handle_task_operations(action1='execute')
        cve.enter_task_menu()
        assert cve.find_task_name_from_task_list("冷补丁修复：" + task_name)
        assert cve.find_task_name_from_task_list("热补丁修复：" + task_name)

    def test_cve_fix_013_cve_detail_create_and_jump(self, cve):
        """CVE详情页面-生成cve修复任务-不选择host-创建-跳转到任务页面"""
        cve.enter_cve_menu()
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        self.task_name = task_name
        cve.search_cve(ini._get("CVE1", "cve_id"))
        cve.enter_cve_detail_page(ini._get("CVE1", "cve_id"))
        cve.create_cve_fix_task(task_name, task_desc, action1="create", action2="jump")
        assert cve.find_task_name_from_task_list("冷补丁修复："+task_name)
        assert cve.find_task_name_from_task_list("热补丁修复："+task_name)

    def test_cve_fix_014_cve_detail_hotpatch(self, cve):
        """CVE详情页面-生成cve修复任务-热补丁修复-弹出框等待5秒钟，返回cve页面"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        cves = ini._get("CVE1", "cve_id")
        host = ini._get("CLUSTER.GROUP1.HOST", "CLUSTER_NAME1.GROUP1.HOSTIP1")
        self.task_name = task_name
        cve.enter_cve_menu()
        cve.search_cve(cves)
        cve.enter_cve_detail_page(cves)
        cve.click_host_expand_icon(host)
        cve.create_cve_fix_task(task_name, task_desc, fix_way="hotpatch", action2="wait")
        cve.enter_task_menu()
        assert cve.find_task_name_from_task_list(task_name)