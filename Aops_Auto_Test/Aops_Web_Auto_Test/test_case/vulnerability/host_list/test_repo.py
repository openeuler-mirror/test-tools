# -*-coding:utf-8-*-
import pytest

from Aops_Web_Auto_Test.common.readelement import Element
from Aops_Web_Auto_Test.page_object.vulnerability import VulnerabilityPage
from Aops_Web_Auto_Test.common import createtestdata

vulner = Element('vulnerability')


class TestAddRepo:
    @pytest.fixture(scope="function", autouse=True)
    def create_data(self, drivers):
        repo = VulnerabilityPage(drivers)
        self.repo_name = None
        yield
        try:
            repo.click_close_button()
        except Exception as e:
            print("关闭新增REPO页面失败", e)
            pass
        if self.repo_name:
            try:
                repo.delete_repo(self.repo_name)
            except Exception as e:
                print(f"删除repo: {self.repo_name}失败", e)
                pass

    def test_add_repo_001_by_input_valid_repo(self, drivers):
        repo = VulnerabilityPage(drivers)
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name()
        repo_data = createtestdata.repo_data()
        repo.add_repo('local-cluster', repo_name, repo_data)
        self.repo_name = repo_name
        assert repo.check_repo_name_in_list(repo_name)

    def test_add_repo_002_by_input_invalid_repo_name(self, drivers):
        repo = VulnerabilityPage(drivers)
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name(length=21)
        repo_data = createtestdata.repo_data(length=20)
        repo.add_repo('local-cluster', repo_name, repo_data)
        assert repo.get_item_explain_error("repo_name") == "20个字符以内"
        repo.click_close_button()
        repo_name = createtestdata.repo_name(length=0)
        repo.add_repo('local-cluster', repo_name, repo_data)
        assert repo.get_item_explain_error("repo_name") == "请输入REPO源名称，20个字符以内"

    def test_add_repo_003_by_input_invalid_repo_content(self, drivers):
        repo = VulnerabilityPage(drivers)
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name()
        repo_data = createtestdata.repo_data(length=515)
        repo.add_repo('local-cluster', repo_name, repo_data)
        assert repo.get_item_explain_error("repo_data") == "512个字符以内"
        repo.click_close_button()
        repo.add_repo('local-cluster', repo_name, "")
        assert repo.get_item_explain_error("repo_data") == "请输入REPO内容，512个字符以内"


class TestSetRepo:

    @pytest.fixture(scope="class", autouse=True)
    def create_and_clear_repo(self, drivers):
        repo = VulnerabilityPage(drivers)
        repo.enter_host_menu()
        global repo_name
        repo_name = createtestdata.repo_name()
        repo_data = createtestdata.repo_data()
        repo.add_repo('local-cluster', repo_name, repo_data)
        assert repo.check_repo_name_in_list(repo_name)
        yield repo_name
        try:
            repo.delete_repo(repo_name)
        except Exception as e:
            print(f"删除repo: {repo_name}失败", e)
            pass

    @pytest.fixture(scope="function", autouse=True)
    def delete_task(self, drivers):
        repo = VulnerabilityPage(drivers)
        self.task_name = None
        yield
        if self.task_name:
            try:
                repo.enter_task_menu()
                repo.delete_task(self.task_name)
            except Exception as e:
                print(f"删除repo: {repo_name}失败", e)
                pass

    def test_set_up_repo_allhost(self, drivers):
        """给当前集群下所有的主机设置REPO"""
        repo = VulnerabilityPage(drivers)
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        repo.enter_host_menu()
        repo.set_repo(task_name, task_desc, "local-cluster", repo_name)
        repo.enter_task_menu()
        self.task_name = task_name
        assert repo.find_task_name_from_task_list(task_name)
