# -*-coding:utf-8-*-
import os
import time
import pytest

from Aops_Web_Auto_Test.common.readconfig import ini
from Aops_Web_Auto_Test.common.readelement import Element
from Aops_Web_Auto_Test.config.conf import cm
from Aops_Web_Auto_Test.page_object.vulnerability import VulnerabilityPage
from Aops_Web_Auto_Test.common import createtestdata
from Aops_Web_Auto_Test.page_object.script_magt import ScriptManagementPage
vulner = Element('vulnerability')


@pytest.fixture(scope='class')
def repo(drivers) -> VulnerabilityPage:
    return VulnerabilityPage(drivers)


class TestRepo:

    @pytest.fixture(scope="class", autouse=True)
    def create_and_clear_repo(self, repo):
        repo.enter_host_menu()
        global repo_name
        repo_name = createtestdata.repo_name()
        repo_data = createtestdata.repo_data()
        repo.add_repo('local-cluster', repo_name, repo_data)
        repo.search_repo(repo_name)
        assert repo.check_repo_name_in_list(repo_name)
        yield repo_name
        try:
            repo.enter_host_menu()
            repo.delete_repo(repo_name)
        except Exception as e:
            print(f"删除repo: {repo_name}失败", e)
            pass

    @pytest.fixture(scope="function", autouse=True)
    def create_data(self, repo):
        self.repo_name = None
        self.task_name = None
        self.need_delete_files = []
        yield
        try:
            repo.click_close_button()
        except Exception as e:
            print("关闭新增REPO页面失败", e)
            pass
        if self.task_name:
            try:
                repo.enter_task_menu()
                repo.delete_task(self.task_name)
            except Exception as e:
                print(f"删除任务: {self.task_name}失败", e)
                pass
        if self.repo_name:
            try:
                repo.search_repo(self.repo_name)
                repo.delete_repo(self.repo_name)
            except Exception as e:
                print(f"删除repo: {self.repo_name}失败", e)
                pass
        if repo.element_displayed(vulner['set_repo_page_title']):
            try:
                repo.click_cancel_button()
            except Exception as e:
                print(f"关闭设置repo页面失败", e)
                pass
        if self.need_delete_files:
            for file_name in self.need_delete_files:
                ScriptManagementPage.delete_test_file(file_name)

    def test_download_repo_template_001(self, repo):
        repo.enter_host_menu()
        repo.click_element(vulner['add_repo'])
        repo.element_displayed(vulner['add_repo_page_title'])
        repo.click_element(vulner['download_repo'])
        time.sleep(10)
        expected_filename = 'template.repo'
        self.need_delete_files = ["template.repo"]
        download_file_path = os.path.join(cm.TESTDATA_PATH, expected_filename)
        assert os.path.exists(download_file_path)

    def test_add_repo_001_by_upload_file(self, repo):
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name()
        repo.add_repo('local-cluster', repo_name, filename="correct-repo.repo")
        repo.search_repo(repo_name)
        self.repo_name = repo_name
        assert repo.check_repo_name_in_list(repo_name)

    def test_add_repo_002_by_upload_file_invalid_file(self, repo):
        repo_name = createtestdata.repo_name()
        ScriptManagementPage.create_test_file("test_empty.repo", 0)
        ScriptManagementPage.copy_test_file("correct-repo.repo", "test_error_permission.repo")
        ScriptManagementPage.create_test_file("test_more_than_500.repo", 0, 513)
        file_name = cm.BASE_DIR + '/test_data/' + "test_error_permission.repo"
        os.chmod(file_name, 000)
        self.need_delete_files = ["test_empty.repo", "test_error_permission.repo", "test_more_than_500.repo"]
        repo.enter_host_menu()
        repo.add_repo('local-cluster', repo_name, filename="test_empty.repo")
        assert repo.get_item_explain_error("repo_data") == "请输入REPO内容，512个字符以内"
        repo.click_cancel_button()
        repo.add_repo('local-cluster', repo_name, filename="test_error_permission.repo")
        assert repo.get_item_explain_error("repo_data") == "请输入REPO内容，512个字符以内"
        repo.click_cancel_button()
        repo.add_repo('local-cluster', repo_name, filename="test_more_than_500.repo")
        assert repo.get_item_explain_error("repo_data") == "请输入REPO内容，512个字符以内"

    def test_add_repo_003_by_input_valid_repo(self, repo):
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name()
        repo_data = createtestdata.repo_data()
        repo.add_repo('local-cluster', repo_name, repo_data)
        self.repo_name = repo_name
        repo.search_repo(repo_name)
        assert repo.check_repo_name_in_list(repo_name)

    def test_add_repo_004_by_input_invalid_repo_name(self, repo):
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name(length=21)
        repo_data = createtestdata.repo_data(length=20)
        repo.add_repo('local-cluster', repo_name, repo_data)
        assert repo.get_item_explain_error("repo_name") == "20个字符以内"
        repo.click_close_button()
        repo_name = createtestdata.repo_name(length=0)
        repo.add_repo('local-cluster', repo_name, repo_data)
        assert repo.get_item_explain_error("repo_name") == "请输入REPO源名称，20个字符以内"

    def test_add_repo_005_by_input_invalid_repo_content(self, repo):
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name()
        repo_data = createtestdata.repo_data(length=515)
        repo.add_repo('local-cluster', repo_name, repo_data)
        assert repo.get_item_explain_error("repo_data") == "512个字符以内"
        repo.click_close_button()
        repo.add_repo('local-cluster', repo_name, "")
        assert repo.get_item_explain_error("repo_data") == "请输入REPO内容，512个字符以内"

    def test_add_repo_006_cancel(self, repo):
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name()
        repo_data = createtestdata.repo_data()
        repo.add_repo('local-cluster', repo_name, repo_data, action="cancel")
        repo.search_repo(repo_name)
        assert not repo.check_repo_name_in_list(repo_name)

    def test_delete_repo_001(self, repo):
        repo.enter_host_menu()
        repo_name = createtestdata.repo_name()
        repo_data = createtestdata.repo_data()
        repo.add_repo('local-cluster', repo_name, repo_data)
        repo.search_repo(repo_name)
        assert repo.check_repo_name_in_list(repo_name)
        repo.delete_repo(repo_name, action="cancel")
        assert repo.check_repo_name_in_list(repo_name)
        repo.delete_repo(repo_name)
        assert not repo.check_repo_name_in_list(repo_name)

    def test_set_up_repo_001_allhost(self, repo):
        """给当前集群下所有的主机设置REPO"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        repo.enter_host_menu()
        repo.set_repo(task_name, "local-cluster", repo_name, task_desc)
        repo.enter_task_menu()
        self.task_name = task_name
        assert repo.find_task_name_from_task_list(task_name)

    def test_set_up_repo_002_cancel(self, repo):
        """取消设置repo"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        repo.enter_host_menu()
        repo.set_repo(task_name, "local-cluster", repo_name, task_desc, action1='cancel')
        repo.enter_task_menu()
        assert not repo.find_task_name_from_task_list(task_name)

    def test_set_up_repo_003_create_and_execute(self, repo):
        """创建并执行设置REPO任务"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        repo.enter_host_menu()
        repo.set_repo(task_name, "local-cluster", repo_name, task_desc, action1='execute')
        repo.enter_task_menu()
        self.task_name = task_name
        assert repo.check_task_execute_status(task_name)

    def test_set_up_repo_004_jump_to_task(self, repo):
        """创建并执行设置REPO任务，并且直接跳转到任务页面"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        repo.enter_host_menu()
        repo.set_repo(task_name, "local-cluster", repo_name, task_desc, action2="jump")
        self.task_name = task_name
        assert repo.find_task_name_from_task_list(task_name)

    def test_set_up_repo_004_without_host(self, repo):
        """创建设置REPO任务,不选择主机"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        repo.enter_host_menu()
        repo.click_element(vulner['set_repo_button'])
        repo.element_displayed(vulner['set_repo_page_title'])
        repo.element_displayed(vulner['set_repo_page_type'])
        repo.clear_before_input_text(vulner['task_name'], task_name)
        repo.clear_before_input_text(vulner['task_desc'], task_desc)
        repo.select_cluster("local-cluster")
        repo.select_value_by_dropdown(vulner['select_repo'], repo_name, is_scroll='yes')
        repo.click_selected_all_button()
        repo.click_element(vulner['create_task'])
        assert repo.get_notice_text() == "至少选择一个主机进行repo设置"

    @pytest.mark.dependency(name="set_up_repo_005_with_host", scope="session")
    def test_set_up_repo_005_with_host(self, repo):
        """创建设置REPO任务,指定主机"""
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc()
        hosts = ini._get("CLUSTER.GROUP1.HOST", "CLUSTER_NAME1.GROUP1.HOSTIP1")
        repo.enter_host_menu()
        repo.select_host_by_checkbox(hosts)
        repo.set_repo(task_name, "local-cluster", repo_name, task_desc)
        repo.enter_task_menu()
        self.task_name = task_name
        assert repo.find_task_name_from_task_list(task_name)

    def test_set_up_repo_005_verify_task_name(self, repo):
        """在设置repo任务页面，检查任务名称的有效性"""
        repo.enter_host_menu()
        task_desc = createtestdata.task_desc()
        repo.set_repo("", "local-cluster", repo_name, task_desc)
        assert repo.get_item_explain_error("任务名称") == "请输入任务名称"
        repo.click_cancel_button()
        task_name = createtestdata.task_name(min_len=21, max_len=22)
        repo.set_repo(task_name, "local-cluster", repo_name, task_desc)
        repo.enter_task_menu()
        self.task_name = task_name[:21]
        assert repo.find_task_name_from_task_list(task_name)

    def test_set_up_repo_006_verify_task_description(self, repo):
        """在设置repo任务页面，检查任务描述的有效性"""
        repo.enter_host_menu()
        task_name = createtestdata.task_name()
        task_desc = createtestdata.task_desc(min_len=51, max_len=52)
        repo.set_repo(task_name, "local-cluster", repo_name, "")
        assert repo.get_item_explain_error("任务描述") == "请输入任务描述"
        repo.click_cancel_button()
        repo.set_repo(task_name, "local-cluster", repo_name, task_desc)
        repo.enter_task_menu()
        self.task_name = task_name
        assert repo.find_task_name_from_task_list(task_name)


