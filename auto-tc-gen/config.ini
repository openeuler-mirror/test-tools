# This program is licensed under Mulan PSL v2.
# You can use it according to the terms and conditions of the Mulan PSL v2.
#          http://license.coscl.org.cn/MulanPSL2
# THIS PROGRAM IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
# EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
# MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
# See the Mulan PSL v2 for more details.
####################################
# @Author    	:   buchengjie
# @Contact   	:   mf21320006@smail.nju.edu.cn
# @Date      	:   2023-5-29 12:00:00
# @License   	:   Mulan PSL v2
# @Version   	:   1.0
# @Desc      	:   本文件定义了自动生成测试用例工具里使用到的相关配置，在运行工具前，可人工编写
#####################################

#coding=UTF-8

#[Directories]包括是否全自动执行的设置与相关文件的存储路径
# is_auto : [y: 自动执行]; [n: 需要人工输入无法解析的参数及其取值]
# download_dir : 下载软件包源码包或者二进制包的地址
# build_dir : 软件包编译相关的数据存放的路径
# log_dir : 日志文件存储路径
# scr_dir : 最终生成的测试脚本存放路径
[Directories]
is_auto = y
download_dir = ./download_dir/
build_dir = ./rpmbuild/
log_dir = ./log/
scr_dir = ./result/


#[Packages]定义了所有待处理的软件包名称，会使用该名称去下载相关数据
# packages : 一个软件包名称，或者分别使用','隔开的多个软件包名称，例如：
#     packages = git-tools 或
#     packages = dogtail,git-tools,custodia
[Packages]
packages = dogtail,git-tools,custodia,vdo,boom-boot,beakerlib,criu,intel-cmt-cat,libsmi,linuxconsoletools


#[section]定义了需要在生成的测试脚本里添加的作者、协议和源等信息
[section]
author = # @Author    :   automic_test
contact = # @Contact   :   1241427943@qq.com
licenses = # @License   :   Mulan PSL v2
source = source ${OET_PATH}/libs/locallibs/common_lib.sh


#####################################
#很多命令中的参数是需要设定取值的。为了设置取值，还需要判断参数类型。
#以下为待测命令中包含的各种不同类型参数对应的默认设置，具体包括：
# 1. 默认取值：default_value; 只支持一个默认取值
# 2. 包含这种类型参数的命令执行前可能需要的特殊pre_test操作：pre; 可以是用分号隔开的多个操作
# 3. 包含这种类型参数的命令执行后可能需要的特殊post_test操作：post；可以是用分号隔开的多个操作
# 4. 可能是这种类型参数的参数名称：values; 一个，或者用','隔开的多个可能的名称
#
#本配置文件暂列的参数取值类型有：
# 1. int：整型
# 2. file：文件
# 3. fixed：特殊的参数，无法提供默认值；当启动人工介入时，可以人工输入的
# 4. path：路径
# 5. url：链接
# 6. branch：分支名称
# 7. string：字符串
#
#源代码中与这些类型对应的对象为/my_class/type_class.py中的class TypeClass。
#如果需要扩展类型，请按照给定的案例添加内容，并在工具源代码/help_parse/parameter_classify.py中添加解析方法
#
#以下为关于参数类型各具体属性的详细说明：
#1. value：在判断一个待测命令的参数属于哪个类型的时候会用到这个属性。首先，在parameter_classify.py中定义了解析config.ini文件且将
#          其构建成/my_class/type_class.py中的class TypeClass；在get_parameters_type.py中，对每一个待测命令通过对比其参数名称
#          与各个TypeClass中的value列表的关系，去识别其参数类型（具体的，如果属于某一个类型的value列表中一项，就是该类型）。
#2. pre和post：对run_test中的所有命令的每一个参数都会独立生成其对应的pre和post操作，因此，如果同一个run_test中有多个同类型的参数,
#           会出现重复的pre和post操作。现有这些pre和post操作重复执行不会影响测试过程。未来可以统一管理一个run_test中的变量类型，
#           对每一种类型而非每一个变量去生成pre和post操作。
#
#此外，目前每一种类型在本配置文件中仅支持一个默认取值，未来可以在/my_class/type_class.py中的class TypeClass
#类型定义中为每一种类型添加生成更多取值的自动化方法。例如对于int可以用random()函数生成更多取值。

[int]
default_value = 10
pre =
post =
values = TIMEOUT, WEIGHT, n-processes, number-of-results, msg-id, levels, msg ids, association_level, min_duplicated_lines, TOP, rgcount, rgflags, size, number, delay sec, iter, EVTCORES, EVTPIDS, SECONDS, CLASS2ID, mib, level, double, int, pidlist, update frequency in HZ, gain, autocenter_strength, baud, WIDTH, HEIGHT, PAPER, MARGIN, BORDER, LWIDTH, SCALE, UP, PAGES, from-unit, to-unit, floatrates, pid, low, kind1, heur1, number, hexnumber, alloc, bits, frequency, gigabytes, INT, scale, timeout, dump, PID, MAXLINES, SERVERPID, size, start, end, size limit, start time, end time, BINDDN, max errors, base DN, SERVERTIMEOUT, BOOT_ID, MACHINE_ID, FIELDS, OS_ID, score, SERVER PORT, port, port-number

[file]
default_value = /root/test/test.txt
pre = mkdir -p /root/test; touch /root/test/test.txt
post = rm -rf /root/test
values = METAFILE, JOURNAL, CERTFILE, KEYFILE, SPDX ID, OUTPUT FILE, FILE, file1, files, TEXINFO-FILE, script, tests, OUTPUT, PROFILE, infile, replacement_file, INFILE, OUTFILE, input, output, script-only-if-no-other-script, input-file, script-file, callgrind-out-file, source-files, cachegrind-out-file1, cachegrind-out-file2, outfile, files-to-merge, massif-out-file, prog-and-args, file, cachegrind-out-file, CAFILE, PWDFILE, SERVERPIDFILE, SCRIPTPIDFILE, configfile, file2, CONFIG_FILE

[fixed]
default_value =
pre =
post =
values = =, :, ;, y, f, 100, s, i, 1, 0, X, N, d, feature, cpu, string, a4, en, LLX LLY URX URY, p, A, yes, none, 4, no, 0xPP, 0xPP-0xQQ, 0xRR-0xSS, mkdir, YAML, find sb, /dev/device, /dev/input/eventXX, latin, LLX LLY URX URY, BYTESTRING, float, i32, T, 64, BLOCK, KCONFIG, S, D, OUTPUT, ERROR, empty, error, summary, equal, alphabet, uppercase, lowercase, alphabet, number, base, L

[path]
default_value = /root/test
pre = mkdir -p /root/test
post = rm -rf /root/test
values = FONT PATH, reposit, destination-dir, DIR, WORKDIR, GITDIR, PATH, sc, pkg, packages, script-source, CPU-LIST, IRQ-LIST, CPU-SOCKET-LIST, THREAD-LIST, script, cpulist, socket_path, path, dir, access log, rootDN, SUBVOL, IMG, LV, OSRELEASE, ROOT, PATTERN, repository, module or path

[url]
default_value = https://www.baidu.com/
pre =
post =
values = UDS_URLPATH, uri, XSERVER, html, ipaddr, URL, SERVER, instance

[branch]
default_value = branch_name
pre = mkdir -p /root/test; git clone https://gitee.com/openeuler/mugen /root/test/; cd /root/test; git branch branch_name
post = rm -rf /root/test
values = BRANCH_PREFIX, NEW_PREFIX, branch

[string]
default_value = string
pre =
post =
values = HEADER, pattern, SUFFIX, commitmsg, message, code, ancest, project name, script-filename, profilename, POLICY, RTPRIO, args, SESSION, FILENAME, LOGOUT, TERMINATE, 'SESSION_BINARY, DM, START, device, identify, blocktype, blockalloc, val, blockbits, blockrg, rgbitmaps, key, value, name, TYPE, CLASSDEF, prefix, command name, latex, SIGNATURE, PAGESPECS, some text, language, BASE, KEY, expr, patt1, event1, STR, begin, hint1, variant1, sonamepattern, symbolpattern, arg, vdo device name, vdoBacking, filename, PATTERN, STRING, NAME, name of pipe, PLUGINS, USER, instance, BASEDN, BINDDN, BINDPW, OPTS, OSSHORTNAME, TITLE, INSTANCE, label, UUID, oldmodule, newmodule, ancestor
